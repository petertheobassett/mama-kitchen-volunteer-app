{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/app/api/signups-overview/route.js"],"sourcesContent":["import { google } from 'googleapis';\n\nexport async function GET() {\n  const auth = new google.auth.GoogleAuth({\n    credentials: {\n      client_email: process.env.GOOGLE_CLIENT_EMAIL,\n      private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\\n'),\n    },\n    scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n  });\n\n  const sheets = google.sheets({ version: 'v4', auth });\n  const spreadsheetId = process.env.GOOGLE_SHEET_ID;\n\n  const [signupsRes, directoryRes, eventsRes] = await Promise.all([\n    sheets.spreadsheets.values.get({ spreadsheetId, range: 'Volunteer Signups' }),\n    sheets.spreadsheets.values.get({ spreadsheetId, range: 'Volunteer Directory' }),\n    sheets.spreadsheets.values.get({ spreadsheetId, range: '2025 Schedule of Events' }),\n  ]);\n\n  const signups = signupsRes.data.values.slice(1);\n  const directory = directoryRes.data.values.slice(1);\n  const events = eventsRes.data.values;\n\n  const eventRows = events.slice(1).filter(row => row[0]?.trim() && row[1]?.trim());\n  const volunteerCols = [5, 7, 9, 11, 13, 15]; // F, H, J, L, N, P\n\n  const normalize = str =>\n    (str || '').replace(/\\s+/g, ' ').trim().toLowerCase();\n\n  const toISODate = (val) => {\n    const date = new Date(val);\n    if (isNaN(date)) return '';\n    return date.toISOString().slice(0, 10); // yyyy-mm-dd\n  };\n\n  const getVolunteerHistory = (volunteerName) => {\n    const normalized = normalize(volunteerName);\n    for (const row of eventRows) {\n      for (const col of volunteerCols) {\n        const cell = row[col]?.trim().toLowerCase();\n        if (cell === normalized) {\n          return {\n            lastEvent: row[1],\n            lastDate: toISODate(row[0]),\n          };\n        }\n      }\n    }\n    return null;\n  };\n\n  const getSpotsLeft = (eventName, eventDate) => {\n    const normalizedName = normalize(eventName);\n    const normalizedDate = toISODate(eventDate);\n\n    const match = eventRows.find(row => {\n      const rowName = normalize(row[1]);\n      const rowDate = toISODate(row[0]);\n      return rowName === normalizedName && rowDate === normalizedDate;\n    });\n\n    if (!match) return 0;\n\n    let filled = 0;\n    for (const col of volunteerCols) {\n      if (match[col]?.trim()) filled++;\n    }\n\n    return 6 - filled;\n  };\n\n  const enriched = signups.map(([timestamp, eventName, eventDate, name, phone, email]) => {\n    const normalizedName = normalize(name);\n    const directoryRow = directory.find(row =>\n      normalize(row[0]) === normalizedName\n    );\n\n    const currentPhone = directoryRow?.[1]?.trim() || '';\n    const currentEmail = directoryRow?.[2]?.trim() || '';\n    const rating = directoryRow?.[4] ?? ''; // Column E\n    const isInDirectory = !!directoryRow;\n\n    const needsDirectoryUpdate =\n      isInDirectory &&\n      (currentPhone !== phone.trim() || currentEmail !== email.trim());\n\n    const history = getVolunteerHistory(name);\n    const spotsLeft = getSpotsLeft(eventName, eventDate);\n\n    return {\n      name,\n      phone,\n      email,\n      event: eventName,\n      date: timestamp,\n      eventDate: toISODate(eventDate),\n      rating,\n      isInDirectory,\n      needsDirectoryUpdate,\n      lastEvent: history?.lastEvent || '',\n      lastDate: history?.lastDate || '',\n      spotsLeft,\n    };\n  });\n\n  return Response.json(enriched);\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACtC,aAAa;YACX,cAAc,QAAQ,GAAG,CAAC,mBAAmB;YAC7C,aAAa,QAAQ,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,OAAO;QAC7D;QACA,QAAQ;YAAC;SAA+C;IAC1D;IAEA,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QAAE,SAAS;QAAM;IAAK;IACnD,MAAM,gBAAgB,QAAQ,GAAG,CAAC,eAAe;IAEjD,MAAM,CAAC,YAAY,cAAc,UAAU,GAAG,MAAM,QAAQ,GAAG,CAAC;QAC9D,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE;YAAe,OAAO;QAAoB;QAC3E,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE;YAAe,OAAO;QAAsB;QAC7E,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YAAE;YAAe,OAAO;QAA0B;KAClF;IAED,MAAM,UAAU,WAAW,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7C,MAAM,YAAY,aAAa,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;IACjD,MAAM,SAAS,UAAU,IAAI,CAAC,MAAM;IAEpC,MAAM,YAAY,OAAO,KAAK,CAAC,GAAG,MAAM,CAAC,CAAA,MAAO,GAAG,CAAC,EAAE,EAAE,UAAU,GAAG,CAAC,EAAE,EAAE;IAC1E,MAAM,gBAAgB;QAAC;QAAG;QAAG;QAAG;QAAI;QAAI;KAAG,EAAE,mBAAmB;IAEhE,MAAM,YAAY,CAAA,MAChB,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,QAAQ,KAAK,IAAI,GAAG,WAAW;IAErD,MAAM,YAAY,CAAC;QACjB,MAAM,OAAO,IAAI,KAAK;QACtB,IAAI,MAAM,OAAO,OAAO;QACxB,OAAO,KAAK,WAAW,GAAG,KAAK,CAAC,GAAG,KAAK,aAAa;IACvD;IAEA,MAAM,sBAAsB,CAAC;QAC3B,MAAM,aAAa,UAAU;QAC7B,KAAK,MAAM,OAAO,UAAW;YAC3B,KAAK,MAAM,OAAO,cAAe;gBAC/B,MAAM,OAAO,GAAG,CAAC,IAAI,EAAE,OAAO;gBAC9B,IAAI,SAAS,YAAY;oBACvB,OAAO;wBACL,WAAW,GAAG,CAAC,EAAE;wBACjB,UAAU,UAAU,GAAG,CAAC,EAAE;oBAC5B;gBACF;YACF;QACF;QACA,OAAO;IACT;IAEA,MAAM,eAAe,CAAC,WAAW;QAC/B,MAAM,iBAAiB,UAAU;QACjC,MAAM,iBAAiB,UAAU;QAEjC,MAAM,QAAQ,UAAU,IAAI,CAAC,CAAA;YAC3B,MAAM,UAAU,UAAU,GAAG,CAAC,EAAE;YAChC,MAAM,UAAU,UAAU,GAAG,CAAC,EAAE;YAChC,OAAO,YAAY,kBAAkB,YAAY;QACnD;QAEA,IAAI,CAAC,OAAO,OAAO;QAEnB,IAAI,SAAS;QACb,KAAK,MAAM,OAAO,cAAe;YAC/B,IAAI,KAAK,CAAC,IAAI,EAAE,QAAQ;QAC1B;QAEA,OAAO,IAAI;IACb;IAEA,MAAM,WAAW,QAAQ,GAAG,CAAC,CAAC,CAAC,WAAW,WAAW,WAAW,MAAM,OAAO,MAAM;QACjF,MAAM,iBAAiB,UAAU;QACjC,MAAM,eAAe,UAAU,IAAI,CAAC,CAAA,MAClC,UAAU,GAAG,CAAC,EAAE,MAAM;QAGxB,MAAM,eAAe,cAAc,CAAC,EAAE,EAAE,UAAU;QAClD,MAAM,eAAe,cAAc,CAAC,EAAE,EAAE,UAAU;QAClD,MAAM,SAAS,cAAc,CAAC,EAAE,IAAI,IAAI,WAAW;QACnD,MAAM,gBAAgB,CAAC,CAAC;QAExB,MAAM,uBACJ,iBACA,CAAC,iBAAiB,MAAM,IAAI,MAAM,iBAAiB,MAAM,IAAI,EAAE;QAEjE,MAAM,UAAU,oBAAoB;QACpC,MAAM,YAAY,aAAa,WAAW;QAE1C,OAAO;YACL;YACA;YACA;YACA,OAAO;YACP,MAAM;YACN,WAAW,UAAU;YACrB;YACA;YACA;YACA,WAAW,SAAS,aAAa;YACjC,UAAU,SAAS,YAAY;YAC/B;QACF;IACF;IAEA,OAAO,SAAS,IAAI,CAAC;AACvB","debugId":null}}]
}