{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/lib/parseGoogleSerialDate.js"],"sourcesContent":["export function parseGoogleSerialDate(value) {\n    const base = new Date(Date.UTC(1899, 11, 30));\n    return new Date(base.getTime() + Number(value) * 86400000);\n  }  "],"names":[],"mappings":";;;AAAO,SAAS,sBAAsB,KAAK;IACvC,MAAM,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,MAAM,IAAI;IACzC,OAAO,IAAI,KAAK,KAAK,OAAO,KAAK,OAAO,SAAS;AACnD","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/app/api/signups-overview/route.js"],"sourcesContent":["import { google } from 'googleapis';\nimport { parseGoogleSerialDate } from '../../../lib/parseGoogleSerialDate';\n\nexport async function GET() {\n  try {\n    const auth = new google.auth.GoogleAuth({\n      credentials: {\n        client_email: process.env.GOOGLE_CLIENT_EMAIL,\n        private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\\n'),\n      },\n      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],\n    });\n\n    const sheets = google.sheets({ version: 'v4', auth });\n    const spreadsheetId = process.env.GOOGLE_SHEET_ID;\n\n    const [signupsRes, directoryRes, eventsRes] = await Promise.all([\n      sheets.spreadsheets.values.get({ spreadsheetId, range: 'Volunteer Signups' }),\n      sheets.spreadsheets.values.get({ spreadsheetId, range: 'Volunteer Directory' }),\n      sheets.spreadsheets.values.get({ spreadsheetId, range: '2025 Schedule of Events' }),\n    ]);\n\n    const signups = signupsRes.data.values?.slice(1) || [];\n    const directory = directoryRes.data.values?.slice(1) || [];\n    const events = eventsRes.data.values || [];\n\n    const eventRows = events.slice(1).filter(row => row[0]?.trim() && row[1]?.trim());\n    const volunteerCols = [5, 7, 9, 11, 13, 15];\n\n    const normalize = str =>\n      (str || '').replace(/\\s+/g, ' ').trim().toLowerCase();\n\n    const toISODate = (val) => {\n      if (!val) return '';\n      if (!isNaN(val)) {\n        const date = parseGoogleSerialDate(Number(val));\n        return date.toISOString().slice(0, 10);\n      }\n      const date = new Date(val);\n      return isNaN(date) ? '' : date.toISOString().slice(0, 10);\n    };\n\n    const getVolunteerHistory = (volunteerName) => {\n      const normalized = normalize(volunteerName);\n      for (const row of eventRows) {\n        for (const col of volunteerCols) {\n          const cell = row[col]?.trim().toLowerCase();\n          if (cell === normalized) {\n            return {\n              lastEvent: row[1],\n              lastDate: toISODate(row[0]),\n            };\n          }\n        }\n      }\n      return null;\n    };\n\n    const getSpotsLeft = (eventName, eventDate) => {\n      const normalizedName = normalize(eventName);\n      const normalizedDate = toISODate(eventDate);\n      const match = eventRows.find(row => {\n        const rowName = normalize(row[1]);\n        const rowDate = toISODate(row[0]);\n        return rowName === normalizedName && rowDate === normalizedDate;\n      });\n      if (!match) return 0;\n\n      let filled = 0;\n      for (const col of volunteerCols) {\n        if (match[col]?.trim()) filled++;\n      }\n\n      return 6 - filled;\n    };\n\n    const enriched = signups.map(([timestamp, eventName, eventDate, name, phone, email]) => {\n      const normalizedName = normalize(name);\n      const directoryRow = directory.find(row =>\n        normalize(row[0]) === normalizedName\n      );\n\n      const currentPhone = directoryRow?.[1]?.trim() || '';\n      const currentEmail = directoryRow?.[2]?.trim() || '';\n      const rating = directoryRow?.[4] ?? '';\n      const isInDirectory = !!directoryRow;\n\n      const needsDirectoryUpdate =\n        isInDirectory &&\n        (currentPhone !== phone.trim() || currentEmail !== email.trim());\n\n      const history = getVolunteerHistory(name);\n      const spotsLeft = getSpotsLeft(eventName, eventDate);\n\n      return {\n        name,\n        phone,\n        email,\n        event: eventName,\n        date: timestamp,\n        eventDate: toISODate(eventDate),\n        rating,\n        isInDirectory,\n        needsDirectoryUpdate,\n        lastEvent: history?.lastEvent || '',\n        lastDate: history?.lastDate || '',\n        spotsLeft,\n      };\n    });\n\n    return Response.json(enriched);\n  } catch (err) {\n    console.error('‚ùå signups-overview error:', err);\n    return new Response(JSON.stringify({ error: err.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}