{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/app/api/get-events/route.js"],"sourcesContent":["import { google } from 'googleapis';\n\nexport async function GET() {\n  try {\n    const auth = new google.auth.JWT(\n      process.env.GOOGLE_CLIENT_EMAIL,\n      null,\n      process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\\n'),\n      ['https://www.googleapis.com/auth/spreadsheets.readonly']\n    );\n\n    const sheets = google.sheets({ version: 'v4', auth });\n    const sheetId = process.env.GOOGLE_SHEET_ID;\n\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: sheetId,\n      range: '2025 Schedule of Events!A2:Z1000', // ✅ Includes attendance columns R–W\n    });\n\n    const rows = response.data.values || [];\n\n    const events = rows.map((row, i) => {\n      // ✅ Ensure row includes all columns A–Z (26 columns)\n      const padded = [...row];\n      while (padded.length < 26) padded.push('');\n\n      const rawDate = padded[0];\n      const name = padded[1];\n\n      if (!rawDate || !name) return null;\n\n      // Parse and normalize date from raw yyyy-m-d\n      const [yyyy, m, d] = rawDate.split('-');\n      const mm = m.padStart(2, '0');\n      const dd = d.padStart(2, '0');\n\n      const parsedDate = new Date(+yyyy, +mm - 1, +dd, 12);\n      if (isNaN(parsedDate)) return null;\n\n      const iso = `${parsedDate.getFullYear()}-${String(parsedDate.getMonth() + 1).padStart(2, '0')}-${String(parsedDate.getDate()).padStart(2, '0')}`;\n\n      return {\n        raw: padded,\n        date: iso,\n        label: `${parsedDate.toLocaleDateString('en-US', {\n          weekday: 'short',\n          month: 'short',\n          day: 'numeric',\n          year: 'numeric',\n        })} – ${name}`,\n      };\n    }).filter(Boolean);\n\n    return new Response(JSON.stringify(events), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (err) {\n    console.error('❌ Error in /api/get-events:', err);\n    return new Response(JSON.stringify({ error: 'Failed to fetch events' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,GAAG,CAC9B,QAAQ,GAAG,CAAC,mBAAmB,EAC/B,MACA,QAAQ,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,OAAO,OAC9C;YAAC;SAAwD;QAG3D,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QACnD,MAAM,UAAU,QAAQ,GAAG,CAAC,eAAe;QAE3C,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf,OAAO;QACT;QAEA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QAEvC,MAAM,SAAS,KAAK,GAAG,CAAC,CAAC,KAAK;YAC5B,qDAAqD;YACrD,MAAM,SAAS;mBAAI;aAAI;YACvB,MAAO,OAAO,MAAM,GAAG,GAAI,OAAO,IAAI,CAAC;YAEvC,MAAM,UAAU,MAAM,CAAC,EAAE;YACzB,MAAM,OAAO,MAAM,CAAC,EAAE;YAEtB,IAAI,CAAC,WAAW,CAAC,MAAM,OAAO;YAE9B,6CAA6C;YAC7C,MAAM,CAAC,MAAM,GAAG,EAAE,GAAG,QAAQ,KAAK,CAAC;YACnC,MAAM,KAAK,EAAE,QAAQ,CAAC,GAAG;YACzB,MAAM,KAAK,EAAE,QAAQ,CAAC,GAAG;YAEzB,MAAM,aAAa,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,IAAI;YACjD,IAAI,MAAM,aAAa,OAAO;YAE9B,MAAM,MAAM,GAAG,WAAW,WAAW,GAAG,CAAC,EAAE,OAAO,WAAW,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAE,OAAO,WAAW,OAAO,IAAI,QAAQ,CAAC,GAAG,MAAM;YAEhJ,OAAO;gBACL,KAAK;gBACL,MAAM;gBACN,OAAO,GAAG,WAAW,kBAAkB,CAAC,SAAS;oBAC/C,SAAS;oBACT,OAAO;oBACP,KAAK;oBACL,MAAM;gBACR,GAAG,GAAG,EAAE,MAAM;YAChB;QACF,GAAG,MAAM,CAAC;QAEV,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,SAAS;YAC1C,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAyB,IAAI;YACvE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}