{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/app/api/get-events/route.js"],"sourcesContent":["import { google } from 'googleapis';\n\nexport async function GET() {\n  try {\n    const auth = new google.auth.JWT(\n      process.env.GOOGLE_CLIENT_EMAIL,\n      null,\n      process.env.GOOGLE_PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n      ['https://www.googleapis.com/auth/spreadsheets.readonly']\n    );\n\n    const sheets = google.sheets({ version: 'v4', auth });\n\n    const sheetId = process.env.GOOGLE_SHEET_ID;\n    const range = '2025 Schedule of Events!A2:AH1000';\n\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: sheetId,\n      range,\n    });\n\n    const rows = response.data.values || [];\n\n    const serialToDate = (serial) => {\n      const base = new Date(Date.UTC(1899, 11, 30));\n      return new Date(base.getTime() + serial * 86400000);\n    };\n\n    const normalizedEvents = rows.map((row, i) => {\n      const rawDate = row[0];\n      if (!rawDate) return null;\n\n      let parsed;\n      if (!isNaN(rawDate)) {\n        parsed = serialToDate(Number(rawDate));\n      } else {\n        parsed = new Date(rawDate.trim());\n      }\n\n      if (isNaN(parsed)) {\n        console.warn(`❌ Skipping row ${i + 2} — invalid date:`, rawDate);\n        return null;\n      }\n\n      return {\n        raw: row,\n        date: rawDate,\n        parsedDate: parsed.toISOString(), // you can re-parse this as new Date(parsedDate) in frontend\n      };\n    }).filter(Boolean);\n\n    console.log(`✅ Loaded ${normalizedEvents.length} events from sheet`);\n\n    return new Response(JSON.stringify(normalizedEvents), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (err) {\n    console.error('❌ Sheet fetch error:', err);\n    return new Response(JSON.stringify({ error: err.message }), { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,GAAG,CAC9B,QAAQ,GAAG,CAAC,mBAAmB,EAC/B,MACA,QAAQ,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,OAC/C;YAAC;SAAwD;QAG3D,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QAEnD,MAAM,UAAU,QAAQ,GAAG,CAAC,eAAe;QAC3C,MAAM,QAAQ;QAEd,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf;QACF;QAEA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QAEvC,MAAM,eAAe,CAAC;YACpB,MAAM,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,MAAM,IAAI;YACzC,OAAO,IAAI,KAAK,KAAK,OAAO,KAAK,SAAS;QAC5C;QAEA,MAAM,mBAAmB,KAAK,GAAG,CAAC,CAAC,KAAK;YACtC,MAAM,UAAU,GAAG,CAAC,EAAE;YACtB,IAAI,CAAC,SAAS,OAAO;YAErB,IAAI;YACJ,IAAI,CAAC,MAAM,UAAU;gBACnB,SAAS,aAAa,OAAO;YAC/B,OAAO;gBACL,SAAS,IAAI,KAAK,QAAQ,IAAI;YAChC;YAEA,IAAI,MAAM,SAAS;gBACjB,QAAQ,IAAI,CAAC,CAAC,eAAe,EAAE,IAAI,EAAE,gBAAgB,CAAC,EAAE;gBACxD,OAAO;YACT;YAEA,OAAO;gBACL,KAAK;gBACL,MAAM;gBACN,YAAY,OAAO,WAAW;YAChC;QACF,GAAG,MAAM,CAAC;QAEV,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,iBAAiB,MAAM,CAAC,kBAAkB,CAAC;QAEnE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,mBAAmB;YACpD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,IAAI,OAAO;QAAC,IAAI;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}