{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/lib/parseGoogleSerialDate.js"],"sourcesContent":["export function parseGoogleSerialDate(value) {\n    const base = new Date(Date.UTC(1899, 11, 30));\n    return new Date(base.getTime() + Number(value) * 86400000);\n  }  "],"names":[],"mappings":";;;AAAO,SAAS,sBAAsB,KAAK;IACvC,MAAM,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,MAAM,IAAI;IACzC,OAAO,IAAI,KAAK,KAAK,OAAO,KAAK,OAAO,SAAS;AACnD","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/app/api/get-events/route.js"],"sourcesContent":["import { google } from 'googleapis';\nimport { parseGoogleSerialDate } from '../../../lib/parseGoogleSerialDate';\n\nexport async function GET() {\n  try {\n    const auth = new google.auth.JWT(\n      process.env.GOOGLE_CLIENT_EMAIL,\n      null,\n      process.env.GOOGLE_PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n      ['https://www.googleapis.com/auth/spreadsheets.readonly']\n    );\n\n    const sheets = google.sheets({ version: 'v4', auth });\n    const sheetId = process.env.GOOGLE_SHEET_ID;\n\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: sheetId,\n      range: '2025 mcma events!A2:B100',\n    });\n\n    const rows = response.data.values || [];\n\n    const events = rows\n      .map(([rawDate, name]) => {\n        const serial = parseFloat(rawDate);\n        if (isNaN(serial) || serial < 45000) return null; // safeguard: ~2023-03-01 and later\n\n        const parsed = parseGoogleSerialDate(serial);\n\n        return {\n          name: name?.trim() || '',\n          date: parsed.toISOString().slice(0, 10),\n          label: `${parsed.toDateString()} â€“ ${name}`,\n        };\n      })\n      .filter(Boolean);\n\n    return new Response(JSON.stringify(events), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Error in /api/get-events:', error);\n    return new Response(\n      JSON.stringify({ error: 'Failed to fetch events' }),\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,GAAG,CAC9B,QAAQ,GAAG,CAAC,mBAAmB,EAC/B,MACA,QAAQ,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,OAC/C;YAAC;SAAwD;QAG3D,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QACnD,MAAM,UAAU,QAAQ,GAAG,CAAC,eAAe;QAE3C,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf,OAAO;QACT;QAEA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QAEvC,MAAM,SAAS,KACZ,GAAG,CAAC,CAAC,CAAC,SAAS,KAAK;YACnB,MAAM,SAAS,WAAW;YAC1B,IAAI,MAAM,WAAW,SAAS,OAAO,OAAO,MAAM,mCAAmC;YAErF,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,wBAAqB,AAAD,EAAE;YAErC,OAAO;gBACL,MAAM,MAAM,UAAU;gBACtB,MAAM,OAAO,WAAW,GAAG,KAAK,CAAC,GAAG;gBACpC,OAAO,GAAG,OAAO,YAAY,GAAG,GAAG,EAAE,MAAM;YAC7C;QACF,GACC,MAAM,CAAC;QAEV,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,SAAS;YAC1C,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAAyB,IACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}