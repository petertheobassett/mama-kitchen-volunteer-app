{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/lib/parseGoogleSerialDate.js"],"sourcesContent":["export function parseGoogleSerialDate(value) {\n    const base = new Date(Date.UTC(1899, 11, 30));\n    return new Date(base.getTime() + Number(value) * 86400000);\n  }  "],"names":[],"mappings":";;;AAAO,SAAS,sBAAsB,KAAK;IACvC,MAAM,OAAO,IAAI,KAAK,KAAK,GAAG,CAAC,MAAM,IAAI;IACzC,OAAO,IAAI,KAAK,KAAK,OAAO,KAAK,OAAO,SAAS;AACnD","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/app/api/confirm-to-event/route.js"],"sourcesContent":["import { google } from 'googleapis';\nimport { parseGoogleSerialDate } from '../../../lib/parseGoogleSerialDate';\n\nexport async function POST(req) {\n  const { name, phone, eventName, eventDate } = await req.json();\n\n  if (!name || !phone || !eventName || !eventDate) {\n    return Response.json({ error: 'Missing required fields' }, { status: 400 });\n  }\n\n  const auth = new google.auth.GoogleAuth({\n    credentials: {\n      client_email: process.env.GOOGLE_CLIENT_EMAIL,\n      private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\\n'),\n    },\n    scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n  });\n\n  const sheets = google.sheets({ version: 'v4', auth });\n  const spreadsheetId = process.env.GOOGLE_SHEET_ID;\n  const range = '2025 Schedule of Events!A1:Q1000';\n\n  const result = await sheets.spreadsheets.values.get({ spreadsheetId, range });\n  const rows = result.data.values;\n  const data = rows.slice(1); // skip header\n\n  // âœ… Robust date parser (handles ISO string or serial number)\n  const toISODate = (val) => {\n    if (!val) return '';\n    if (!isNaN(val)) {\n      const date = parseGoogleSerialDate(Number(val));\n      return date.toISOString().slice(0, 10);\n    }\n    const date = new Date(val);\n    return isNaN(date) ? '' : date.toISOString().slice(0, 10);\n  };\n\n  const normalizedDate = toISODate(eventDate);\n  const normalize = str => (str || '').replace(/\\s+/g, ' ').trim().toLowerCase();\n\n  const matchIndex = data.findIndex(row => {\n    const rowDate = toISODate(row[0]);\n    const rowName = normalize(row[1]);\n    return rowDate === normalizedDate && rowName === normalize(eventName);\n  });\n\n  if (matchIndex === -1) {\n    return Response.json({ message: 'Event not found', notFound: true }, { status: 404 });\n  }\n\n  const row = data[matchIndex];\n  const volunteerCols = [5, 7, 9, 11, 13, 15];\n\n  let emptyCol = null;\n  for (const col of volunteerCols) {\n    const val = row[col]?.trim();\n    if (!val) {\n      emptyCol = col;\n      break;\n    }\n  }\n\n  if (emptyCol === null) {\n    return Response.json({ message: 'Event is full', full: true });\n  }\n\n  const sheetRow = matchIndex + 2;\n  const nameCol = String.fromCharCode(65 + emptyCol);\n  const phoneCol = String.fromCharCode(65 + emptyCol + 1);\n\n  try {\n    await sheets.spreadsheets.values.batchUpdate({\n      spreadsheetId,\n      requestBody: {\n        valueInputOption: 'USER_ENTERED',\n        data: [\n          {\n            range: `2025 Schedule of Events!${nameCol}${sheetRow}`,\n            values: [[name]],\n          },\n          {\n            range: `2025 Schedule of Events!${phoneCol}${sheetRow}`,\n            values: [[phone]],\n          },\n        ],\n      },\n    });\n\n    return Response.json({ message: 'Confirmed to event', success: true });\n  } catch (error) {\n    console.error('Sheet write error:', error);\n    return Response.json({ error: 'Sheet write failed' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}