{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/peterbassett/Documents/Projects/mcma-kitchen-volunteers/src/app/api/get-signup-events/route.js"],"sourcesContent":["import { google } from 'googleapis';\n\nexport async function GET() {\n  try {\n    const auth = new google.auth.JWT(\n      process.env.GOOGLE_CLIENT_EMAIL,\n      null,\n      process.env.GOOGLE_PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n      ['https://www.googleapis.com/auth/spreadsheets.readonly']\n    );\n\n    const sheets = google.sheets({ version: 'v4', auth });\n    const sheetId = process.env.GOOGLE_SHEET_ID;\n\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: sheetId,\n      range: '2025 Schedule of Events!A2:Q1000',\n    });\n\n    const rows = response.data.values || [];\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const volunteerCols = [5, 7, 9, 11, 13, 15];\n\n    const events = rows\n      .map((row) => {\n        const rawDate = row[0];\n        const name = row[1];\n        if (!rawDate || !name) return null;\n\n        const [yyyy, m, d] = rawDate.split('-');\n        const mm = m.padStart(2, '0');\n        const dd = d.padStart(2, '0');\n        const parsed = new Date(+yyyy, +mm - 1, +dd);\n\n        if (isNaN(parsed)) return null;\n\n        const parsedMidnight = new Date(parsed);\n        parsedMidnight.setHours(0, 0, 0, 0);\n        if (parsedMidnight < today) return null;\n\n        const filledSpots = volunteerCols.reduce((count, col) => {\n          const cell = row[col];\n          return cell?.trim() ? count + 1 : count;\n        }, 0);\n\n        const spotsLeft = 6 - filledSpots;\n\n        return {\n          name: name.trim(),\n          date: `${parsed.getFullYear()}-${mm}-${dd}`,\n          label: `${parsed.toDateString()} – ${name.trim()}${spotsLeft === 0 ? ' (FULL)' : ''}`,\n          spotsLeft,\n        };\n      })\n      .filter(Boolean);\n\n    return new Response(JSON.stringify(events), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (err) {\n    console.error('❌ Error fetching signup events:', err);\n    return new Response(JSON.stringify({ error: err.message }), { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,GAAG,CAC9B,QAAQ,GAAG,CAAC,mBAAmB,EAC/B,MACA,QAAQ,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,OAC/C;YAAC;SAAwD;QAG3D,MAAM,SAAS,qJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAE,SAAS;YAAM;QAAK;QACnD,MAAM,UAAU,QAAQ,GAAG,CAAC,eAAe;QAE3C,MAAM,WAAW,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,eAAe;YACf,OAAO;QACT;QAEA,MAAM,OAAO,SAAS,IAAI,CAAC,MAAM,IAAI,EAAE;QACvC,MAAM,QAAQ,IAAI;QAClB,MAAM,QAAQ,CAAC,GAAG,GAAG,GAAG;QAExB,MAAM,gBAAgB;YAAC;YAAG;YAAG;YAAG;YAAI;YAAI;SAAG;QAE3C,MAAM,SAAS,KACZ,GAAG,CAAC,CAAC;YACJ,MAAM,UAAU,GAAG,CAAC,EAAE;YACtB,MAAM,OAAO,GAAG,CAAC,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,MAAM,OAAO;YAE9B,MAAM,CAAC,MAAM,GAAG,EAAE,GAAG,QAAQ,KAAK,CAAC;YACnC,MAAM,KAAK,EAAE,QAAQ,CAAC,GAAG;YACzB,MAAM,KAAK,EAAE,QAAQ,CAAC,GAAG;YACzB,MAAM,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC;YAEzC,IAAI,MAAM,SAAS,OAAO;YAE1B,MAAM,iBAAiB,IAAI,KAAK;YAChC,eAAe,QAAQ,CAAC,GAAG,GAAG,GAAG;YACjC,IAAI,iBAAiB,OAAO,OAAO;YAEnC,MAAM,cAAc,cAAc,MAAM,CAAC,CAAC,OAAO;gBAC/C,MAAM,OAAO,GAAG,CAAC,IAAI;gBACrB,OAAO,MAAM,SAAS,QAAQ,IAAI;YACpC,GAAG;YAEH,MAAM,YAAY,IAAI;YAEtB,OAAO;gBACL,MAAM,KAAK,IAAI;gBACf,MAAM,GAAG,OAAO,WAAW,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI;gBAC3C,OAAO,GAAG,OAAO,YAAY,GAAG,GAAG,EAAE,KAAK,IAAI,KAAK,cAAc,IAAI,YAAY,IAAI;gBACrF;YACF;QACF,GACC,MAAM,CAAC;QAEV,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,SAAS;YAC1C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,IAAI,OAAO;QAAC,IAAI;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}